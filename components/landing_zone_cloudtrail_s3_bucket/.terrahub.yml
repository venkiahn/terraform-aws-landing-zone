component:
  name: landing_zone_cloudtrail_s3_bucket
  template:
    locals:
      s3_bucket_map: >-
        var.${tfvar.terrahub["landing_zone_providers"]["0"]}_provider["landing_zone_cloudtrail_s3_bucket_resource"]
      lifecycle_rule_map: >-
        var.${tfvar.terrahub["landing_zone_providers"]["0"]}_provider["landing_zone_cloudtrail_s3_bucket_lifecycle_rule"]
      logging_map: >-
        var.${tfvar.terrahub["landing_zone_providers"]["0"]}_provider["landing_zone_cloudtrail_s3_bucket_logging"]
    resource:
      aws_s3_bucket:
        landing_zone_cloudtrail_s3_bucket:
          provider: 'aws.${tfvar.terrahub["landing_zone_providers"]["0"]}'
          count: length(local.s3_bucket_map)
          bucket: 'tomap(local.s3_bucket_map)["config_${count.index}"]["name"]'
          versioning!:
            enabled: 'tomap(local.s3_bucket_map)["config_${count.index}"]["versioning"]'
          dynamic "logging"!:
            for_each: >-
              length(local.logging_map["config_${count.index}"]) == 0
              ?[]:list(local.logging_map["config_${count.index}"])
            content!:
              target_bucket: logging.value.target_bucket!
          dynamic "lifecycle_rule"!:
            for_each: >-
              length(local.lifecycle_rule_map["config_${count.index}"]) == 0
              ?[]:list(local.lifecycle_rule_map["config_${count.index}"])
            content!:
              abort_incomplete_multipart_upload_days: lifecycle_rule.value.abort_incomplete_multipart_upload_days!
              enabled: lifecycle_rule.value.enabled!
              id: lifecycle_rule.value.id!
              noncurrent_version_expiration!:
                days: lifecycle_rule.value.noncurrent_version_expiration_days!
              expiration!:
                days: lifecycle_rule.value.expiration_days!
                expired_object_delete_marker: lifecycle_rule.value.expiration_expired_object_delete_marker!
          server_side_encryption_configuration!:
            rule!:
              apply_server_side_encryption_by_default!:
                sse_algorithm: >-
                  tomap(local.s3_bucket_map)["config_${count.index}"]["sse_algorithm"]
    output:
      id:
        value: aws_s3_bucket.landing_zone_cloudtrail_s3_bucket.*.id
      thub_id:
        value: aws_s3_bucket.landing_zone_cloudtrail_s3_bucket.*.id
      arn:
        value: aws_s3_bucket.landing_zone_cloudtrail_s3_bucket.*.arn
      landing_zone_cloudtrail_s3_bucket_id:
        value: >-
          { for s3 in aws_s3_bucket.landing_zone_cloudtrail_s3_bucket.*: s3.id
          => s3.id }
      landing_zone_cloudtrail_s3_bucket_arn:
        value: >-
          { for s3 in aws_s3_bucket.landing_zone_cloudtrail_s3_bucket.*: s3.id
          => s3.arn }
